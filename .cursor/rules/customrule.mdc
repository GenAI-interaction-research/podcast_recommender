---
description: 
globs: 
alwaysApply: true
---
Rules for AI Assistant (Based on "Building Web Applications to Study Consumer Interaction with Generative-AI")These rules guide the generation of code for a GenAI-powered web application designed for consumer research studies. Please adhere to these principles:1. Architecture & Core Structure:Mandatory Three-Tier Architecture: Always structure the application with a distinct Frontend, Backend, and GenAI Service layer connected via API.Backend Mediation: Generate code assuming a Backend acts as the sole intermediary between the Frontend and the GenAI Service API. Do not generate Frontend code that calls the GenAI API directly.API-Centric Design: Assume GenAI capabilities are accessed via external APIs (e.g., OpenAI, Anthropic, Google). Generate code for REST API interactions, primarily using POST requests to send prompts and configurations.Decoupling: Ensure Backend endpoints provide a simplified interface for the Frontend, hiding the complexities of the GenAI API interaction.2. Security:No Frontend Credentials: Never place API keys, secrets, or other sensitive credentials in Frontend code (HTML, CSS, JavaScript).Backend Credential Management: Assume API keys are securely stored and accessed only within the Backend environment (e.g., via environment variables or a secure secrets manager). Generate Backend code to load and use these credentials securely.Server-Side Validation: Implement input validation logic within the Backend code. Do not rely solely on Frontend validation.PII Handling:When generating prompts or interaction logic, avoid code that explicitly asks for Personally Identifiable Information (PII).Generate Backend code that includes placeholders or integration points for PII detection/redaction mechanisms before data is sent to the external GenAI API. Suggest libraries like Microsoft Presidio if applicable for the language/framework.3. Frontend Development (e.g., JavaScript within Qualtrics):Structure: Generate standard HTML for structure, CSS for styling, and JavaScript for interactivity and communication with the Backend.Backend Communication: Generate asynchronous JavaScript code (e.g., fetch API) to send user input to the designated Backend endpoint and receive/display the response.Data Capture (Qualtrics Example):Generate JavaScript to capture participant input (e.g., text prompts) and store it in a specified Qualtrics Embedded Data field before sending it to the Backend.Generate JavaScript to capture the text response received from the Backend and store it in a specified Qualtrics Embedded Data field.For non-text outputs (images, audio), generate JavaScript to receive an identifier (e.g., URL) from the Backend and store that identifier in a specified Qualtrics Embedded Data field.4. Backend Development (e.g., Python/Flask/FastAPI, Node.js/Express):Endpoint Creation: Generate Backend code to create specific API endpoints (routes) that the Frontend will call.Request Handling: Generate code to receive requests from the Frontend (typically JSON payloads), parse the input data (e.g., user prompt, conversation history).GenAI API Interaction: Generate code to:Construct the correct request payload for the target GenAI API, including the model name, prompt/messages, and configurable parameters (temperature, max_tokens, etc.).Inject the secure API key into the API request header (e.g., Authorization: Bearer $API_KEY).Send the request to the GenAI API endpoint.Handle the response from the GenAI API, including potential errors.Response Formatting: Generate code to format the relevant part of the GenAI response (e.g., the generated text content) and send it back to the Frontend.Non-Text Output Handling: If the application involves non-text generation (e.g., images):Generate Backend code to interact with a specified cloud storage service API (e.g., AWS S3, Cloudinary).Include logic to upload the generated media (received from the GenAI API) to the storage service.Return the persistent URL or identifier of the stored media to the Frontend.Placeholder Logic: Include placeholders or comments for adding optional logic like rate limiting, content filtering, or conversation history management if requested.5. API Configuration & Parameters:Parameterization: Generate code that makes GenAI API parameters (model, temperature, max_tokens, system prompt/role) easily configurable (e.g., via variables or configuration files) rather than hardcoded.Documentation: Add comments indicating which GenAI model and version the code is intended for, and clearly label configurable parameters.6. Hosting & Deployment:Prioritize Serverless: When suggesting hosting solutions or generating deployment configurations, prioritize Serverless/FaaS platforms (AWS Lambda, Google Cloud Functions, Azure Functions) or PaaS (Heroku, Google App Engine) due to their suitability for research workloads (auto-scaling, cost-effectiveness).Environment Variables: Generate code that relies on environment variables for configuration (API keys, model names, database URIs, etc.).7. Error Handling & Reliability:Robust Error Handling: Implement try...catch blocks or equivalent error handling for API calls (both to the GenAI service and any other external services like cloud storage) and other potentially failing operations in the Backend.Logging: Include basic logging statements (or placeholders) in the Backend to track incoming requests, outgoing API calls, and errors.8. General:Code Comments: Generate well-commented code explaining the purpose of functions, complex logic, and configuration points.Modularity: Write functions and code blocks that are reasonably modular and focused on specific tasks.Language/Framework Consistency: Maintain consistency with the specified programming language, framework, and established patterns within the existing project codebase.